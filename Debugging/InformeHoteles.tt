<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" language="C#" hostspecific="True"#>
<#@ output extension=".txt" #>
<#@ JRPPCLMCFProyectoIPS processor="JRPPCLMCFProyectoIPSDirectiveProcessor" requires="fileName='Test.JRPPCLMCFProyectoIPS'" #>
<#@ include file="EF.utility.CS.ttinclude" #>

<# 
	
//MAIN
	if (this.TapizClassWeb.Clase.Count==0) 
		//Si no hay ninguna clase creada
		WriteLine("Solucion vacía. No se ha configurado ninguna clase");
	else{ 

		//Inicializa la creacion de ficheros
		var fileManager=EntityFrameworkTemplateFileManager.Create(this); 

		//Recorremos todas las clases creadas en el tapiz
		foreach(Clase clase in this.TapizClassWeb.Clase){ 
			
			//COMPROBAR SI ES UNA HERENCIA, SI LO ES y es superclase NO LE CREAREMOS NINGUN HTML Y En el java le pondremos abstract, si es subclase le pondremos extend en el java
			bool superclase=false;
			bool subclase=false;

			if(clase.subClase!=null){
				foreach(ClasePadreHasClaseHija r in ClasePadreHasClaseHija.GetLinksTosubClase(clase)){
					//WriteLine(clase.nombre+" Es subclase");
					subclase=true;
				} 
			}
			if(clase.superClase!=null){
				//ClasePadreHasClaseHija rex = ClasePadreHasClaseHija.GetLinkTosuperClase(clase);
				foreach(ClasePadreHasClaseHija r in ClasePadreHasClaseHija.GetLinksTosuperClase(clase)){
					//WriteLine(clase.nombre+" Es superclase");
					superclase=true;
				}
			}	
			 
			 

			//Comprobamos si la clase es enriquecida
			bool enriquecida=false;
			if(clase is ClaseEnriquecida)
				enriquecida=true;

			//Llamamos a cada metodo por cada clase para generar el .html y .java
			generarHome(clase, fileManager, enriquecida); 
			generarAlta(clase, fileManager, enriquecida);
			generarListado(clase, fileManager, enriquecida);
			//Parametros (clase: cada clase contenida en el tapiz, filemanager: gestor de creacion de ficheros, enriquecida(bool): indica si la clase es enriquecida o no)
			generarJava(clase, fileManager, subclase, superclase); 
			
		}

		//PONER AQUI METODO PARA CREACION DEL HOME, habra que añadirle un link para cada clase no abstracta creada, para ello guardar el nombre de cada clase no asbtracta creada en el bucle en una lista

		//Cierra la creacion de ficheros
		fileManager.Process();
	}

#>
<#+
//METODO PARA GENERAR HTML DE CADA CLASE_HOME
	void generarHome(Clase clase, EntityFrameworkTemplateFileManager fileManager, bool enriquecida){

		//Crea un fichero donde pondremos la home de cada clase
		fileManager.StartNewFile(clase.nombre+"Home.html");

		 


		//Asignacion de estilos de la clase, dependiendo de si es enriquecida o no
		string tipoLetra="Arial";
		string colorLetra="#000000";
		string alineacion="center";
		string colorFondo="#00aabb";

		//coger estilos de EstiloClase (FUNCIONA)
		if(enriquecida){ 
			ClaseEnriquecida claseEnriquecida= (ClaseEnriquecida)clase; //La casteamos en ClaseEnriquecida
			if(claseEnriquecida.EstiloClase==null) 
				WriteLine("No hay estilos de clase");
			else{					 
				EstiloClase estiloClase = (EstiloClase) claseEnriquecida.EstiloClase;
				tipoLetra = convertidorTiposLetra(estiloClase.tipoLetraCalculado);  
				colorLetra = convertidorColoresHex(estiloClase.colorLetraCalculado);
				alineacion= estiloClase.alineacionCalculado;
				colorFondo = convertidorColoresHex(estiloClase.colorFondoCalculado);			
			}
		}


		WriteLine("<html>"); 
		WriteLine("<head>"); 
		WriteLine("<title>"+clase.nombre+"Home</title>");
		WriteLine("</head>"); 
		WriteLine("<body>"); 
		WriteLine("<div style='border: 1px solid black; margin:20px'>"); 

		WriteLine("<button style='color:"+colorFondo+"; font-family:"+tipoLetra+";'><a href=Home.html>Home</a></button>");

		WriteLine("<form name='"+clase.nombre+"' style='background-color:"+colorFondo+"; color:"+colorLetra+";font-family:"+tipoLetra+";text-align:"+alineacion+";'>");
		WriteLine("<h1>"+clase.nombre+"</h1>"); 

		//Boton para alta
		WriteLine("<button style='color:"+colorLetra+";font-family:"+tipoLetra+"'> <a href='./"+clase.nombre+"Alta.html'>Alta</a> </button>"); 
	
		//Boton para listado
		WriteLine("<button style='color:"+colorLetra+";font-family:"+tipoLetra+"'> <a href='./"+clase.nombre+"Lista.html'>Listado</a> </button>"); 

		WriteLine("</form>"); 
		WriteLine("</div>"); 
		WriteLine("</body>"); 
		WriteLine("</html>"); 
	}
#>
<#+ 
//METODO PARA GENERAR HTML DE CADA CLASE_ALTA

	void generarAlta(Clase clase, EntityFrameworkTemplateFileManager fileManager, bool enriquecida){
		
		//Crea un fichero donde pondremos el alta de cada clase
		fileManager.StartNewFile(clase.nombre+"Alta.html");
	 

		//Asignacion de estilos de la clase, dependiendo de si es enriquecida o no
		string tipoLetra="Arial";
		string colorLetra="#000000";
		string alineacion="center";
		string colorFondo="#00aabb";

		//coger estilos de EstiloClase (FUNCIONA)
		if(enriquecida){ 
			ClaseEnriquecida claseEnriquecida= (ClaseEnriquecida)clase; //La casteamos en ClaseEnriquecida
			if(claseEnriquecida.EstiloClase==null) 
				WriteLine("No hay estilos de clase");
			else{					 
				EstiloClase estiloClase = (EstiloClase) claseEnriquecida.EstiloClase;
				tipoLetra = convertidorTiposLetra(estiloClase.tipoLetraCalculado);
				colorLetra = convertidorColoresHex(estiloClase.colorLetraCalculado);
				alineacion= estiloClase.alineacionCalculado; 
				colorFondo = convertidorColoresHex(estiloClase.colorFondoCalculado);			
			}
		}


		WriteLine("<html>"); 
		WriteLine("<head>"); 
		WriteLine("<title>"+clase.nombre+"Alta</title>");
		WriteLine("</head>"); 
		WriteLine("<body>"); 
		WriteLine("<div style='border: 1px solid black; margin:20px'>"); 

		WriteLine("<button style='color:"+colorFondo+"; font-family:"+tipoLetra+";'><a href=Home.html>Home</a></button>");

		WriteLine("<p style='background-color: "+colorFondo+"; color:"+colorLetra+"; font-weight:bold; font-family:"+tipoLetra+"; text-align:"+alineacion+"'> Alta"+clase.nombre+"</p>");
		WriteLine("<form name='"+clase.nombre+"' style='background-color:"+colorFondo+"; color:"+colorLetra+";font-family:"+tipoLetra+";text-align:"+alineacion+";'>");
		WriteLine("<table>");

		//Añadir fila del atributo clave
		if(clase.AtributoIdentificador!=null){
			AtributoIdentificador atributoIdentificador = clase.AtributoIdentificador;			
			WriteLine("<tr><td style='color:"+colorLetra+"; font-family:"+tipoLetra+";'>"+atributoIdentificador.nombre+"<input type='text' id='"+atributoIdentificador.nombre+"'></td></tr>");	
		}

		//Recorremos los atributos y añadimos una fila a la tabla por cada uno
		if(clase.Atributo.Count==0)
			WriteLine("No hay atributos");
		else
			foreach(Atributo atributo in clase.Atributo){
				WriteLine("<tr><td style='color:"+colorLetra+"; font-family:"+tipoLetra+";'>"+atributo.nombre+"<input type='text' id='"+atributo.nombre+"'></td></tr>");	
			}


		WriteLine("</table>");

		//Botones
		WriteLine("<button style='color:#000000; font-family:Arial;'><a href="+clase.nombre+".html>Guardar</a></button>");
		WriteLine("<button style='color:#000000; font-family:Arial;'><a href="+clase.nombre+"Home.html>Volver</a></button>");

		WriteLine("</form>");
		WriteLine("</div>");
		WriteLine("</body>");
		WriteLine("</html>");

	}
	
#>
<#+

//METODO PARA GENERAR HTML DE CADA CLASE_LISTADO
	void generarListado(Clase clase, EntityFrameworkTemplateFileManager fileManager, bool enriquecida){

		//Crea un fichero donde pondremos el listado de cada clase
		fileManager.StartNewFile(clase.nombre+"Lista.html");

		
		//Asignacion de estilos de la clase, dependiendo de si es enriquecida o no
		string tipoLetra="Arial";
		string colorLetra="#000000";
		string alineacion="center";
		string colorFondo="#00aabb";

		//coger estilos de EstiloClase (FUNCIONA)
		if(enriquecida){ 
			ClaseEnriquecida claseEnriquecida= (ClaseEnriquecida)clase; //La casteamos en ClaseEnriquecida
			if(claseEnriquecida.EstiloClase==null) 
				WriteLine("No hay estilos de clase");
			else{					 
				EstiloClase estiloClase = (EstiloClase) claseEnriquecida.EstiloClase;
				tipoLetra = convertidorTiposLetra(estiloClase.tipoLetraCalculado);
				colorLetra = convertidorColoresHex(estiloClase.colorLetraCalculado);
				alineacion= estiloClase.alineacionCalculado; 
				colorFondo = convertidorColoresHex(estiloClase.colorFondoCalculado);			
			}
		} 

		WriteLine("<html>");
		WriteLine("<head>");
		WriteLine("<title>"+clase.nombre+"Listado</title>");
		WriteLine("</head>");
	    WriteLine("<body>");
	    WriteLine("<div style='border:1px solid black; margin:20px'>");
		WriteLine("<button style='color:"+colorFondo+"; font-family:"+tipoLetra+";'><a href=Home.html>Home</a></button>");
		WriteLine("<h2>Listado " + clase.nombre + "</h2>");
		WriteLine("<p style='background-color: "+colorFondo+"; color:"+colorLetra+"; font-weight:bold; font-family:"+tipoLetra+"; text-align:"+alineacion+"'> Listado "+clase.nombre+"</p>");
		WriteLine("<form name='"+clase.nombre+"' style='background-color:#00aabb; color:#ffffff;font-family:Arial;text-align:center;'>");
		WriteLine("<table>");
			
	   //Para que haga 4 lineas
	   for(int i=0; i<4;i++){
			//Si es la ultima linea
			if(i==3){				
				//PUNTOS SUSPENSIVOS
				WriteLine("<tr>");
				WriteLine("<td>... </td>");
				WriteLine("<td>");
				WriteLine(" </td>");
				WriteLine(" </tr>");

				WriteLine("<tr>");
				WriteLine("<td>Elemento N: " + clase.nombre + " </td>");
				WriteLine("<td>");
			}else{
				WriteLine("<tr>");
				WriteLine("<td>Elemento "+(i+1)+": " + clase.nombre + " </td>");
				WriteLine("<td>");
			}						
			WriteLine("<button style='color:" + colorFondo + ";font-family:" + tipoLetra + "'> <a href=" + clase.nombre + ">Consultar</a> </button>");
			WriteLine("<button style='color:" + colorFondo + ";font-family:" + tipoLetra + "'> <a href=" + clase.nombre + ">Modificar</a> </button>");
			WriteLine("<button style='color:" + colorFondo + ";font-family:" + tipoLetra + "'> <a href=" + clase.nombre + ">Eliminar</a> </button>");

			//AÑADIR UN BOTON POR CADA OPERACION QUE TENGA ESA CLASE

			WriteLine(" </td>");
			WriteLine(" </tr>");			
	   }

       WriteLine("</table>");     

	   WriteLine("<button style='color:"+colorFondo+"; font-family:"+tipoLetra+";'><a href="+clase.nombre+"Home.html>Volver</a></button>");

	   WriteLine("</form>");
	   WriteLine("</div>");
	   WriteLine("</body>");
	   WriteLine("</html>");

		
	}


#>

<#+
   //METODO PARA PONER EL COLOR QUE HAN ELEGIDO LOS USUARIOS (CLASE ENRIQUECIDA)
	  string convertidorColoresHex(string color){
	
			switch (color){
            case "amarillo":
                return "#FFFF00";

            case "verde":
                return "#008000";

            case "rojo":
                return "#FF0000";

            case "azul":
                return "#0000FF";

            case "negro":
			    return "#000000";

            default:
                return "#FFFFFF";
            }
	  }
#>

<#+ 
//METODO PARA GENERAR LA FUENTE QUE HA ELEGIDO EL USUARIO (CLASE ENRIQUECIDA)

   string convertidorTiposLetra(string tipoLetra){
        switch (tipoLetra.ToLower())
        {
            case "arial":
                return "Arial, sans-serif";
            case "timesnewroman":
                return "'Times New Roman', serif";
            case "calibri":
                return "Calibri, sans-serif";
            default:
                return "Arial, sans-serif";
        }
    }
#>
<#+
//METODO PARA GENERAR JAVA DE CADA CLASE  (\t para tabular)
	void generarJava(Clase clase, EntityFrameworkTemplateFileManager fileManager, bool subclase, bool superclase){

		//Crea un fichero java de cada clase
		fileManager.StartNewFile(clase.nombre+".java");

		//Pondremos que hace extend o abstract dependiendo de si es herencia y si es subclase o superclase
		if(!subclase && !superclase){	//Si no tiene herencia
			WriteLine("public class " + clase.nombre + "{");
		}else if(superclase){		//Si es Superclase
			WriteLine("public abstract class " + clase.nombre + "{");
		}else if(subclase){			//Si es Subclase
			foreach(ClasePadreHasClaseHija r in ClasePadreHasClaseHija.GetLinksTosubClase(clase)){
				//WriteLine("public class " + clase.nombre + " extends "+r.subClase.nombre+"{");						
			} 
			
		}

		//Atributo Clave
		if(clase.AtributoIdentificador!=null){
			AtributoIdentificador atributoIdentificador = clase.AtributoIdentificador;
			WriteLine("\t"+atributoIdentificador.modAcceso+" "+atributoIdentificador.tipoDato.ToString()+" "+atributoIdentificador.nombre+";");	//Si hacemos enum del modo de acceso hay que modificar atributo.modAcceso
			
		}

		//Atributos 
		if(clase.Atributo.Count!=0)			
			foreach(Atributo atributo in clase.Atributo){
				WriteLine("\t"+atributo.modAcceso+" "+atributo.tipoDato.ToString()+" "+atributo.nombre+";");	//Si hacemos enum del modo de acceso hay que modificar atributo.modAcceso
			}
		//Constructor
		WriteLine("\tpublic "+ clase.nombre + "(){");
		WriteLine("\t}");	
		
		//Get y Set Atributo Clave 
		if(clase.AtributoIdentificador!=null){
			AtributoIdentificador atributoIdentificador = clase.AtributoIdentificador;
			//GET
				WriteLine("\tpublic " + atributoIdentificador.tipoDato.ToString() + " " + atributoIdentificador.nombre + "(){");
				WriteLine("\t\treturn this."+atributoIdentificador.nombre);	
				WriteLine("\t}");	

				//SET
				WriteLine("\tpublic void "+ atributoIdentificador.nombre + "("+ atributoIdentificador.tipoDato.ToString() + " " + atributoIdentificador.nombre + "){");	
				WriteLine("\t\tthis." + atributoIdentificador.nombre + " = " + atributoIdentificador.nombre);	
				WriteLine("\t}");	
		}

		//Getters y Setters 
		if(clase.Atributo.Count!=0)			
			foreach(Atributo atributo in clase.Atributo){
				//GET
				WriteLine("\tpublic " + atributo.tipoDato.ToString() + " get" + atributo.nombre + "(){");
				WriteLine("\t\treturn this."+atributo.nombre);	
				WriteLine("\t}");	

				//SET
				WriteLine("\tpublic void set"+ atributo.nombre + "("+ atributo.tipoDato.ToString() + " " + atributo.nombre + "){");	
				WriteLine("\t\tthis." + atributo.nombre + " = " + atributo.nombre);	
				WriteLine("\t}");	 
			}

		//Operaciones
		if(clase.Operacion.Count!=0)
			foreach(Operacion operacion in clase.Operacion){ //Recorremos las operaciones de la clase
				//Recuperar parametro de salida y de entrada
				string parametroEntrada = "";
				string parametroSalida = "";
				if(operacion.Parametro.Count!=0){ //Si hay algun parametro
					foreach(Parametro parametro in operacion.Parametro){ //Recorremos los parametros de la operacion
						string auxParametro = parametro.tipoParametro.ToString();
						if(auxParametro.Equals("Entrada")){	//Si es parametro de ENTRADA
							//Si el parametro no es el primero, le ponemos una , al principio
							if(parametroEntrada!="")
								parametroEntrada +=", ";
							parametroEntrada += parametro.tipoDato.ToString() + " " + parametro.nombre;
						}else if(auxParametro.Equals("Salida")) //Si es parametro de SALIDA
							parametroSalida = parametro.tipoDato.ToString();
						else{		//Si el parametro es de ENTRADA-SALIDA
							//Si el parametro no es el primero, le ponemos una , al principio
							if(parametroEntrada!="")
								parametroEntrada +=", ";
							parametroEntrada += parametro.tipoDato.ToString() + " " + parametro.nombre;
							parametroSalida = parametro.tipoDato.ToString();
						}
					}
				}

				//Si no hay parametro de salida, se pone como void
				if(parametroSalida=="")
					parametroSalida="void";

				WriteLine("\t"+operacion.modAcceso + " " + parametroSalida + " " + operacion.nombre + " (" + parametroEntrada + ")"); //Insertar parametros 
				WriteLine("\t\t//To Do"); 
				WriteLine("\t}"); 
			}

		WriteLine("}"); //Cierre de la clase
	}
#>
